{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/* eslint-disable max-classes-per-file */\nimport { PropertyId } from \"../sdk/Exports\";\nexport var RecognitionMode;\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode || (RecognitionMode = {}));\nexport var SpeechResultFormat;\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat || (SpeechResultFormat = {}));\nexport class RecognizerConfig {\n  constructor(speechServiceConfig, parameters) {\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n    this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\n  }\n  get parameters() {\n    return this.privParameters;\n  }\n  get recognitionMode() {\n    return this.privRecognitionMode;\n  }\n  set recognitionMode(value) {\n    this.privRecognitionMode = value;\n    this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n    this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n  }\n  get SpeechServiceConfig() {\n    return this.privSpeechServiceConfig;\n  }\n  get recognitionActivityTimeout() {\n    return this.privRecognitionActivityTimeout;\n  }\n  get isContinuousRecognition() {\n    return this.privRecognitionMode !== RecognitionMode.Interactive;\n  }\n  get languageIdMode() {\n    return this.privLanguageIdMode;\n  }\n  get autoDetectSourceLanguages() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n  }\n  get recognitionEndpointVersion() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\n  }\n  get sourceLanguageModels() {\n    const models = [];\n    let modelsExist = false;\n    if (this.autoDetectSourceLanguages !== undefined) {\n      for (const language of this.autoDetectSourceLanguages.split(\",\")) {\n        const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n        const modelId = this.parameters.getProperty(customProperty, undefined);\n        if (modelId !== undefined) {\n          models.push({\n            language,\n            endpoint: modelId\n          });\n          modelsExist = true;\n        } else {\n          models.push({\n            language,\n            endpoint: \"\"\n          });\n        }\n      }\n    }\n    return modelsExist ? models : undefined;\n  }\n  get maxRetryCount() {\n    return this.privMaxRetryCount;\n  }\n}\n// The config is serialized and sent as the Speech.Config\nexport class SpeechServiceConfig {\n  constructor(context) {\n    this.context = context;\n  }\n  serialize() {\n    return JSON.stringify(this, (key, value) => {\n      if (value && typeof value === \"object\") {\n        const replacement = {};\n        for (const k in value) {\n          if (Object.hasOwnProperty.call(value, k)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n          }\n        }\n        return replacement;\n      }\n      return value;\n    });\n  }\n  get Context() {\n    return this.context;\n  }\n  get Recognition() {\n    return this.recognition;\n  }\n  set Recognition(value) {\n    this.recognition = value.toLowerCase();\n  }\n}\nexport class Context {\n  constructor(os) {\n    this.system = new System();\n    this.os = os;\n  }\n}\nexport class System {\n  constructor() {\n    // Note: below will be patched for official builds.\n    const SPEECHSDK_CLIENTSDK_VERSION = \"1.28.0\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n}\nexport class OS {\n  constructor(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n}\nexport class Device {\n  constructor(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n}\nexport var connectivity;\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity || (connectivity = {}));\nexport var type;\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type || (type = {}));","map":{"version":3,"names":["PropertyId","RecognitionMode","SpeechResultFormat","RecognizerConfig","constructor","speechServiceConfig","parameters","privSpeechServiceConfig","SpeechServiceConfig","Context","privParameters","privMaxRetryCount","parseInt","getProperty","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","undefined","recognitionMode","privRecognitionMode","value","privRecognitionActivityTimeout","Interactive","Recognition","recognitionActivityTimeout","isContinuousRecognition","languageIdMode","autoDetectSourceLanguages","SpeechServiceConnection_AutoDetectSourceLanguages","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","sourceLanguageModels","models","modelsExist","language","split","customProperty","SpeechServiceConnection_EndpointId","toString","modelId","push","endpoint","maxRetryCount","context","serialize","JSON","stringify","key","replacement","k","Object","hasOwnProperty","call","charAt","toLowerCase","substring","recognition","os","system","System","SPEECHSDK_CLIENTSDK_VERSION","name","version","build","lang","OS","platform","Device","manufacturer","model","connectivity","type"],"sources":["src/common.speech/RecognizerConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.28.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}