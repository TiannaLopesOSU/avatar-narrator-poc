{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\nexport class ConversationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const endpointHost = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\n    const correlationId = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n    const endpoint = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\n    const token = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n    Contracts.throwIfNullOrUndefined(token, \"token\");\n    const queryParams = {};\n    queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\n    queryParams[ConversationConnectionConfig.configParams.token] = token;\n    queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","createGuid","Contracts","PropertyId","ConnectionFactoryBase","ConversationConnectionConfig","ConversationWebsocketMessageFormatter","ConversationConnectionFactory","create","config","authInfo","connectionId","endpointHost","parameters","getProperty","ConversationTranslator_Host","host","correlationId","ConversationTranslator_CorrelationId","endpoint","webSocketPath","token","ConversationTranslator_Token","undefined","throwIfNullOrUndefined","queryParams","configParams","apiVersion","enableCompression","fromRecognizerConfig"],"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,EAAEC,mBAAmB,QAAQ,8BAA8B;AAC7E,SAASC,UAAU,QAAwC,sBAAsB;AACjF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,qBAAqB,QAAQ,0BAA0B;AAEhE,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,qCAAqC,QAAQ,yCAAyC;AAE/F;;;;AAIA,OAAM,MAAOC,6BAA8B,SAAQH,qBAAqB;EAE7DI,MAAMA,CAACC,MAAwB,EAAEC,QAAkB,EAAEC,YAAqB;IAE7E,MAAMC,YAAY,GAAWH,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACY,2BAA2B,EAAEV,4BAA4B,CAACW,IAAI,CAAC;IACrI,MAAMC,aAAa,GAAWR,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACe,oCAAoC,EAAEjB,UAAU,EAAE,CAAC;IAE1H,MAAMkB,QAAQ,GAAW,SAASP,YAAY,GAAGP,4BAA4B,CAACe,aAAa,EAAE;IAC7F,MAAMC,KAAK,GAAWZ,MAAM,CAACI,UAAU,CAACC,WAAW,CAACX,UAAU,CAACmB,4BAA4B,EAAEC,SAAS,CAAC;IACvGrB,SAAS,CAACsB,sBAAsB,CAACH,KAAK,EAAE,OAAO,CAAC;IAEhD,MAAMI,WAAW,GAA8B,EAAE;IACjDA,WAAW,CAACpB,4BAA4B,CAACqB,YAAY,CAACC,UAAU,CAAC,GAAGtB,4BAA4B,CAACsB,UAAU;IAC3GF,WAAW,CAACpB,4BAA4B,CAACqB,YAAY,CAACL,KAAK,CAAC,GAAGA,KAAK;IACpEI,WAAW,CAACpB,4BAA4B,CAACqB,YAAY,CAACT,aAAa,CAAC,GAAGA,aAAa;IACpF,MAAMW,iBAAiB,GAAYnB,MAAM,CAACI,UAAU,CAACC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM;IACzH,OAAO,IAAId,mBAAmB,CAACmB,QAAQ,EAAEM,WAAW,EAAE,EAAE,EAAE,IAAInB,qCAAqC,EAAE,EAAEP,SAAS,CAAC8B,oBAAoB,CAACpB,MAAM,CAAC,EAAEmB,iBAAiB,EAAEjB,YAAY,CAAC;EACnL"},"metadata":{},"sourceType":"module","externalDependencies":[]}