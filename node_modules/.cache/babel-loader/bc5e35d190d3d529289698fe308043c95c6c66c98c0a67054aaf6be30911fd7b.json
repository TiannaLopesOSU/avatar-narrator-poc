{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n// eslint-disable-next-line max-classes-per-file\nimport { RecognizerConfig } from \"../../common.speech/Exports\";\nimport { BackgroundEvent, Events, Timeout } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { Connection, Recognizer } from \"../../sdk/Exports\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nexport class ConversationRecognizerFactory {\n  static fromConfig(conversation, speechConfig, audioConfig) {\n    return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\n  }\n}\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\nexport class ConversationTranslatorRecognizer extends Recognizer {\n  constructor(conversation, speechConfig, audioConfig) {\n    const serviceConfigImpl = speechConfig;\n    Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    const conversationImpl = conversation;\n    Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\n    super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n    this.privConversation = conversationImpl;\n    this.privIsDisposed = false;\n    this.privProperties = serviceConfigImpl.properties.clone();\n    this.privConnection = Connection.fromRecognizer(this);\n    this.privSetTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Timeout.setTimeout : setTimeout;\n    this.privClearTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Timeout.clearTimeout : clearTimeout;\n  }\n  set connected(cb) {\n    this.privConnection.connected = cb;\n  }\n  set disconnected(cb) {\n    this.privConnection.disconnected = cb;\n  }\n  /**\n   * Return the speech language used by the recognizer\n   */\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n  /**\n   * Return the properties for the recognizer\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  /**\n   * Connect to the recognizer\n   * @param token\n   */\n  connect(token, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.privReco.conversationTranslatorToken = token;\n      this.resetConversationTimeout();\n      this.privReco.connectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Disconnect from the recognizer\n   */\n  disconnect(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      if (this.privTimeoutToken !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this.privClearTimeout(this.privTimeoutToken);\n      }\n      this.privReco.disconnect().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n      // Destroy the recognizer.\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Send the mute all participants command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n  sendRequest(command, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.sendMessage(command, cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n      // Destroy the recognizer.\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Close and dispose the recognizer\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsDisposed) {\n        if (!!this.privConnection) {\n          this.privConnection.closeConnection();\n          this.privConnection.close();\n        }\n        this.privConnection = undefined;\n        yield this.dispose(true);\n      }\n    });\n  }\n  /**\n   * Dispose the recognizer\n   * @param disposing\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n      if (disposing) {\n        if (this.privTimeoutToken !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          this.privClearTimeout(this.privTimeoutToken);\n        }\n        this.privIsDisposed = true;\n        if (!!this.privConnection) {\n          this.privConnection.closeConnection();\n          this.privConnection.close();\n          this.privConnection = undefined;\n        }\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  /**\n   * Create the config for the recognizer\n   * @param speechConfig\n   */\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  /**\n   * Create the service recognizer.\n   * The audio source is redundnant here but is required by the implementation.\n   * @param authentication\n   * @param connectionFactory\n   * @param audioConfig\n   * @param recognizerConfig\n   */\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n  sendMessage(msg, cb, err) {\n    const withAsync = this.privReco;\n    const PromiseToEmptyCallback = (promise, cb, err) => {\n      if (promise !== undefined) {\n        promise.then(() => {\n          try {\n            if (!!cb) {\n              cb();\n            }\n          } catch (e) {\n            if (!!err) {\n              err(`'Unhandled error on promise callback: ${e}'`);\n            }\n          }\n        }, reason => {\n          try {\n            if (!!err) {\n              err(reason);\n            }\n            // eslint-disable-next-line no-empty\n          } catch (error) {}\n        });\n      } else {\n        if (!!err) {\n          err(\"Null promise\");\n        }\n      }\n    };\n    PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n    this.resetConversationTimeout();\n  }\n  resetConversationTimeout() {\n    if (this.privTimeoutToken !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.privClearTimeout(this.privTimeoutToken);\n    }\n    this.privTimeoutToken = this.privSetTimeout(() => {\n      this.sendRequest(this.privConversation.getKeepAlive());\n    }, 60000);\n  }\n}","map":{"version":3,"names":["RecognizerConfig","BackgroundEvent","Events","Timeout","Contracts","Connection","Recognizer","ConversationConnectionFactory","ConversationServiceAdapter","ConversationRecognizerFactory","fromConfig","conversation","speechConfig","audioConfig","ConversationTranslatorRecognizer","constructor","serviceConfigImpl","throwIfNull","conversationImpl","properties","privConversation","privIsDisposed","privProperties","clone","privConnection","fromRecognizer","privSetTimeout","Blob","Worker","setTimeout","privClearTimeout","clearTimeout","connected","cb","disconnected","speechRecognitionLanguage","privSpeechRecognitionLanguage","isDisposed","connect","token","err","throwIfDisposed","throwIfNullOrWhitespace","privReco","conversationTranslatorToken","resetConversationTimeout","connectAsync","error","Error","typedError","name","message","disconnect","privTimeoutToken","undefined","then","dispose","catch","reason","instance","onEvent","sendRequest","command","sendMessage","close","closeConnection","disposing","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioSource","msg","withAsync","PromiseToEmptyCallback","promise","e","sendMessageAsync","getKeepAlive"],"sources":["src/common.speech/Transcription/ConversationTranslatorRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        this.privSetTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.setTimeout : setTimeout;\r\n        this.privClearTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.clearTimeout : clearTimeout;\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}