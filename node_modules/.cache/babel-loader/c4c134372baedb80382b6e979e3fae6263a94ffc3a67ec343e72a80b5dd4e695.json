{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError } from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { AuthInfo } from \"./IAuthentication\";\n/**\n * @class\n */\nexport class CognitiveSubscriptionKeyAuthentication {\n  /**\n   * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n   * @constructor\n   * @param {string} subscriptionKey - The subscription key\n   */\n  constructor(subscriptionKey) {\n    if (!subscriptionKey) {\n      throw new ArgumentNullError(\"subscriptionKey\");\n    }\n    this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\n  }\n  /**\n   * Fetches the subscription key.\n   * @member\n   * @function\n   * @public\n   * @param {string} authFetchEventId - The id to fetch.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fetch(authFetchEventId) {\n    return Promise.resolve(this.privAuthInfo);\n  }\n  /**\n   * Fetches the subscription key.\n   * @member\n   * @function\n   * @public\n   * @param {string} authFetchEventId - The id to fetch.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fetchOnExpiry(authFetchEventId) {\n    return Promise.resolve(this.privAuthInfo);\n  }\n}","map":{"version":3,"names":["ArgumentNullError","HeaderNames","AuthInfo","CognitiveSubscriptionKeyAuthentication","constructor","subscriptionKey","privAuthInfo","AuthKey","fetch","authFetchEventId","Promise","resolve","fetchOnExpiry"],"sources":["src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SACIA,iBAAiB,QACd,mBAAmB;AAC1B,SAASC,WAAW,QAAQ,eAAe;AAC3C,SACIC,QAAQ,QAEL,mBAAmB;AAE1B;;;AAGA,OAAM,MAAOC,sCAAsC;EAG/C;;;;;EAKAC,YAAmBC,eAAuB;IACtC,IAAI,CAACA,eAAe,EAAE;MAClB,MAAM,IAAIL,iBAAiB,CAAC,iBAAiB,CAAC;;IAGlD,IAAI,CAACM,YAAY,GAAG,IAAIJ,QAAQ,CAACD,WAAW,CAACM,OAAO,EAAEF,eAAe,CAAC;EAC1E;EAEA;;;;;;;EAOA;EACOG,KAAKA,CAACC,gBAAwB;IACjC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,YAAY,CAAC;EAC7C;EAEA;;;;;;;EAOA;EACOM,aAAaA,CAACH,gBAAwB;IACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,YAAY,CAAC;EAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}