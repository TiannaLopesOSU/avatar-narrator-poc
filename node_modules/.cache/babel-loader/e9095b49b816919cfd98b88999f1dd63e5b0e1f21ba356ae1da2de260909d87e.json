{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0555a116\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"innerHTML\"];\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.text = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.text]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.speak && $options.speak(...args))\n  }, \"Speak\"), _createElementVNode(\"div\", {\n    innerHTML: $options.highlightText\n  }, null, 8 /* PROPS */, _hoisted_1), _createElementVNode(\"img\", {\n    src: $options.currentPhoneme\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","$data","text","$event","onClick","_cache","args","$options","speak","innerHTML","highlightText","_hoisted_1","src","currentPhoneme","_hoisted_2"],"sources":["/Users/lopesti/WebTeam/avatar-narrator-poc/src/components/NarratingAvatar.vue"],"sourcesContent":["<template>\n  <div>\n    <textarea v-model=\"text\"></textarea>\n    <button @click=\"speak\">Speak</button>\n    <div v-html=\"highlightText\"></div>\n    <img :src=\"currentPhoneme\" />\n  </div>\n</template>\n\n<script>\nimport imageAEI from \"../assets/AEI.png\";\nimport imageBMP from \"../assets/BMP.png\";\nimport imageN from \"../assets/Nn.png\";\nimport imageCDGKNRSTXYZ from \"../assets/CDGKNRSTXYZ.png\";\nimport imageCHJSONSH from \"../assets/CH,J,SH.png\";\nimport imageFV from \"../assets/FV.png\";\nimport imageL from \"../assets/L.png\";\nimport imageO from \"../assets/O.png\";\nimport imageQW from \"../assets/QW.png\";\nimport imageTH from \"../assets/TH.png\";\nimport imageU from \"../assets/U.png\";\nimport imageE from \"../assets/E.png\";\n\nexport default {\n  data() {\n    return {\n      text: \"Hello there dear friend how is your day going \",\n      currentImage: \"\",\n      currentIndex: 0,\n      letterMapping: {\n        a: imageAEI,\n        b: imageBMP,\n        c: imageCDGKNRSTXYZ,\n        ch: imageCHJSONSH,\n        d: imageFV,\n        e: imageL,\n        f: imageO,\n        g: imageQW,\n        h: imageTH,\n        i: imageU,\n        j: imageN,\n        k: imageE,\n        l: imageAEI,\n        m: imageBMP,\n        n: imageCDGKNRSTXYZ,\n        o: imageCHJSONSH,\n        p: imageFV,\n        q: imageL,\n        r: imageO,\n        s: imageQW,\n        t: imageTH,\n        u: imageU,\n        v: imageN,\n        w: imageE,\n        x: imageAEI,\n        y: imageBMP,\n        z: imageCDGKNRSTXYZ,\n      },\n      // phonemes: [\n      //   {\n      //     id: 1,\n      //     url: imageAEI,\n      //     letters: [\"a\", \"e\", \"i\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 2,\n      //     url: imageBMP,\n      //     letters: [\"b\", \"m\", \"p\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 3,\n      //     url: imageCDGKNRSTXYZ,\n      //     letters: [\"c\", \"d\", \"g\", \"k\", \"n\", \"r\", \"s\", \"t\", \"z\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 4,\n      //     url: imageCHJSONSH,\n      //     letters: [\"ch\", \"j\", \"sh\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 5,\n      //     url: imageFV,\n      //     letters: [\"f\", \"v\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 6,\n      //     url: imageL,\n      //     letters: [\"l\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 7,\n      //     url: imageO,\n      //     letters: [\"o\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 8,\n      //     url: imageQW,\n      //     letters: [\"q\", \"w\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 9,\n      //     url: imageTH,\n      //     letters: [\"t\", \"h\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 10,\n      //     url: imageU,\n      //     letters: [\"u\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 11,\n      //     url: imageN,\n      //     letters: [\"n\"],\n      //     show: false,\n      //   },\n      //   {\n      //     id: 12,\n      //     url: imageE,\n      //     letters: [\"e\"],\n      //     show: false,\n      //   },\n      // ],\n    };\n  },\n  computed: {\n    currentWord() {\n      const words = this.text.split(\" \");\n      if (this.currentIndex > 0 && this.currentIndex < words.length) {\n        return words[this.currentIndex].split(\"\");\n      }\n      return [];\n    },\n    highlightText() {\n      const words = this.text.split(\" \");\n      return words\n        .map((word, index) => {\n          if (index === this.currentIndex) {\n            return `<span class=\"highlight\">${word}</span>`;\n          }\n          return word;\n        })\n        .join(\" \");\n    },\n    currentPhoneme() {\n      return this.getImageUrl(this.currentImage);\n    },\n  },\n  methods: {\n    speak() {\n      const words = this.text.split(\" \");\n      const utterances = [];\n\n      for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        this.currentIndex = i;\n        const utterance = new SpeechSynthesisUtterance(word);\n        utterance.rate = 0.25;\n        utterances.push(utterance);\n        window.speechSynthesis.speak(utterance);\n        for (let j = 0; j < word.length; j++) {\n          setTimeout(() => {\n            this.getImageUrl(word[j]);\n          }, 1000);\n        }\n      }\n    },\n    getImageUrl(letter) {\n      console.log(letter);\n      this.currentImage = this.letterMapping[letter.toLowerCase()]\n        ? this.letterMapping[letter.toLowerCase()]\n        : \"\";\n      return this.currentImage;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.highlighted {\n  background-color: yellow;\n}\n</style>\n"],"mappings":";;;;;uBACEA,mBAAA,CAKM,c,gBAJJC,mBAAA,CAAoC;+DAAjBC,KAAA,CAAAC,IAAI,GAAAC,MAAA;iDAAJF,KAAA,CAAAC,IAAI,E,GACvBF,mBAAA,CAAqC;IAA5BI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;KAAE,OAAK,GAC5BN,mBAAA,CAAkC;IAA7BS,SAAsB,EAAdF,QAAA,CAAAG;EAAa,wBAAAC,UAAA,GAC1BX,mBAAA,CAA6B;IAAvBY,GAAG,EAAEL,QAAA,CAAAM;EAAc,wBAAAC,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}