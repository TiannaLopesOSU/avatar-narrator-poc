{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, SpeechSynthesisBookmarkEventArgs, SpeechSynthesisEventArgs, SpeechSynthesisResult, SpeechSynthesisVisemeEventArgs, SpeechSynthesisWordBoundaryEventArgs } from \"../sdk/Exports\";\nimport { AgentConfig, CancellationErrorCodePropertyName, MetadataType, SynthesisAudioMetadata, SynthesisContext, SynthesisTurn } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport class SynthesisAdapterBase {\n  constructor(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\n    this.speakOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    this.privConnectionConfigurationPromise = undefined;\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n    if (!synthesizerConfig) {\n      throw new ArgumentNullError(\"synthesizerConfig\");\n    }\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privSynthesizerConfig = synthesizerConfig;\n    this.privIsDisposed = false;\n    this.privSpeechSynthesizer = speechSynthesizer;\n    this.privSessionAudioDestination = audioDestination;\n    this.privSynthesisTurn = new SynthesisTurn();\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\n    this.privAgentConfig = new AgentConfig();\n    this.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        const connectionClosedEvent = connectionEvent;\n        if (connectionClosedEvent.statusCode !== 1000) {\n          this.cancelSynthesisLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\n        }\n      }\n    });\n  }\n  get synthesisContext() {\n    return this.privSynthesisContext;\n  }\n  get agentConfig() {\n    return this.privAgentConfig;\n  }\n  get connectionEvents() {\n    return this.privConnectionEvents;\n  }\n  get serviceEvents() {\n    return this.privServiceEvents;\n  }\n  set activityTemplate(messagePayload) {\n    this.privActivityTemplate = messagePayload;\n  }\n  get activityTemplate() {\n    return this.privActivityTemplate;\n  }\n  set audioOutputFormat(format) {\n    this.privAudioOutputFormat = format;\n    this.privSynthesisTurn.audioOutputFormat = format;\n    if (this.privSessionAudioDestination !== undefined) {\n      this.privSessionAudioDestination.format = format;\n    }\n    if (this.synthesisContext !== undefined) {\n      this.synthesisContext.audioOutputFormat = format;\n    }\n  }\n  static addHeader(audio, format) {\n    if (!format.hasHeader) {\n      return audio;\n    }\n    format.updateHeader(audio.byteLength);\n    const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n    tmp.set(new Uint8Array(format.header), 0);\n    tmp.set(new Uint8Array(audio), format.header.byteLength);\n    return tmp.buffer;\n  }\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  dispose(reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n      if (this.privSessionAudioDestination !== undefined) {\n        this.privSessionAudioDestination.close();\n      }\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        const connection = yield this.privConnectionConfigurationPromise;\n        yield connection.dispose(reason);\n      }\n    });\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.connectImpl();\n    });\n  }\n  sendNetworkMessage(path, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      const connection = yield this.fetchConnection();\n      return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\n    });\n  }\n  Speak(text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ssml;\n      if (isSSML) {\n        ssml = text;\n      } else {\n        ssml = this.privSpeechSynthesizer.buildSsml(text);\n      }\n      if (this.speakOverride !== undefined) {\n        return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\n      }\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n      try {\n        yield this.connectImpl();\n        const connection = yield this.fetchConnection();\n        yield this.sendSynthesisContext(connection);\n        yield this.sendSsmlMessage(connection, ssml, requestId);\n        const synthesisStartEventArgs = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(requestId, ResultReason.SynthesizingAudioStarted));\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\n          this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\n        }\n        void this.receiveMessage();\n      } catch (e) {\n        this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\n        return Promise.reject(e);\n      }\n    });\n  }\n  // Cancels synthesis.\n  cancelSynthesis(requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n    const result = new SpeechSynthesisResult(requestId, ResultReason.Canceled, undefined, error, properties);\n    if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n      const cancelEvent = new SpeechSynthesisEventArgs(result);\n      try {\n        this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n        /* eslint-disable no-empty */\n      } catch (_a) {}\n    }\n    if (!!this.privSuccessCallback) {\n      try {\n        this.privSuccessCallback(result);\n        /* eslint-disable no-empty */\n      } catch (_b) {}\n    }\n  }\n  // Cancels synthesis.\n  cancelSynthesisLocal(cancellationReason, errorCode, error) {\n    if (!!this.privSynthesisTurn.isSynthesizing) {\n      this.privSynthesisTurn.onStopSynthesizing();\n      this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  processTypeSpecificMessages(connectionMessage) {\n    return true;\n  }\n  receiveMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const connection = yield this.fetchConnection();\n        const message = yield connection.read();\n        if (this.receiveMessageOverride !== undefined) {\n          return this.receiveMessageOverride();\n        }\n        if (this.privIsDisposed) {\n          // We're done.\n          return;\n        }\n        // indicates we are draining the queue and it came with no message;\n        if (!message) {\n          if (!this.privSynthesisTurn.isSynthesizing) {\n            return;\n          } else {\n            return this.receiveMessage();\n          }\n        }\n        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n        if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\n          switch (connectionMessage.path.toLowerCase()) {\n            case \"turn.start\":\n              this.privSynthesisTurn.onServiceTurnStartResponse();\n              break;\n            case \"response\":\n              this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n              break;\n            case \"audio\":\n              if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase() && !!connectionMessage.binaryBody) {\n                this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n                if (!!this.privSpeechSynthesizer.synthesizing) {\n                  try {\n                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\n                    const ev = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudio, audioWithHeader));\n                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\n                  } catch (error) {\n                    // Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n                if (this.privSessionAudioDestination !== undefined) {\n                  this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n                }\n              }\n              break;\n            case \"audio.metadata\":\n              const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n              for (const metadata of metadataList) {\n                switch (metadata.Type) {\n                  case MetadataType.WordBoundary:\n                  case MetadataType.SentenceBoundary:\n                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\n                    const wordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.Duration, metadata.Data.text.Text, metadata.Data.text.Length, metadata.Type === MetadataType.WordBoundary ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset, metadata.Data.text.BoundaryType);\n                    if (!!this.privSpeechSynthesizer.wordBoundary) {\n                      try {\n                        this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\n                      } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                      }\n                    }\n                    break;\n                  case MetadataType.Bookmark:\n                    const bookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset, metadata.Data.Bookmark);\n                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\n                      try {\n                        this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\n                      } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                      }\n                    }\n                    break;\n                  case MetadataType.Viseme:\n                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\n                    if (metadata.Data.IsLastAnimation) {\n                      const visemeEventArgs = new SpeechSynthesisVisemeEventArgs(metadata.Data.Offset, metadata.Data.VisemeId, this.privSynthesisTurn.getAndClearVisemeAnimation());\n                      if (!!this.privSpeechSynthesizer.visemeReceived) {\n                        try {\n                          this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\n                        } catch (error) {\n                          // Not going to let errors in the event handler\n                          // trip things up.\n                        }\n                      }\n                    }\n                    break;\n                  case MetadataType.SessionEnd:\n                    this.privSynthesisTurn.onSessionEnd(metadata);\n                    break;\n                }\n              }\n              break;\n            case \"turn.end\":\n              this.privSynthesisTurn.onServiceTurnEndResponse();\n              let result;\n              try {\n                const audioBuffer = yield this.privSynthesisTurn.getAllReceivedAudioWithHeader();\n                result = new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudioCompleted, audioBuffer, undefined, undefined, this.privSynthesisTurn.audioDuration);\n                if (!!this.privSuccessCallback) {\n                  this.privSuccessCallback(result);\n                }\n              } catch (error) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(error);\n                }\n              }\n              if (this.privSpeechSynthesizer.synthesisCompleted) {\n                try {\n                  this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new SpeechSynthesisEventArgs(result));\n                } catch (e) {\n                  // Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n              break;\n            default:\n              if (!this.processTypeSpecificMessages(connectionMessage)) {\n                // here are some messages that the derived class has not processed, dispatch them to connect class\n                if (!!this.privServiceEvents) {\n                  this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                }\n              }\n          }\n        }\n        return this.receiveMessage();\n      } catch (e) {\n        // TODO: What goes here?\n      }\n    });\n  }\n  sendSynthesisContext(connection) {\n    const synthesisContextJson = this.synthesisContext.toJSON();\n    if (synthesisContextJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"synthesis.context\", this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\n    }\n    return;\n  }\n  connectImpl(isUnAuthorized = false) {\n    if (this.privConnectionPromise != null) {\n      return this.privConnectionPromise.then(connection => {\n        if (connection.state() === ConnectionState.Disconnected) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = null;\n          return this.connectImpl();\n        }\n        return this.privConnectionPromise;\n      }, () => {\n        this.privConnectionId = null;\n        this.privConnectionPromise = null;\n        return this.connectImpl();\n      });\n    }\n    this.privAuthFetchEventId = createNoDashGuid();\n    this.privConnectionId = createNoDashGuid();\n    this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\n    const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n    this.privConnectionPromise = authPromise.then(result => __awaiter(this, void 0, void 0, function* () {\n      this.privSynthesisTurn.onAuthCompleted(false);\n      const connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\n      // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n      // it'll stop sending events.\n      connection.events.attach(event => {\n        this.connectionEvents.onEvent(event);\n      });\n      const response = yield connection.open();\n      if (response.statusCode === 200) {\n        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\n        return Promise.resolve(connection);\n      } else if (response.statusCode === 403 && !isUnAuthorized) {\n        return this.connectImpl(true);\n      } else {\n        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\n        return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\n      }\n    }), error => {\n      this.privSynthesisTurn.onAuthCompleted(true);\n      throw new Error(error);\n    });\n    // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.privConnectionPromise.catch(() => {});\n    return this.privConnectionPromise;\n  }\n  sendSpeechServiceConfig(connection, SpeechServiceConfigJson) {\n    if (SpeechServiceConfigJson) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\n    }\n  }\n  sendSsmlMessage(connection, ssml, requestId) {\n    return connection.send(new SpeechConnectionMessage(MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\n  }\n  fetchConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privConnectionConfigurationPromise !== undefined) {\n        return this.privConnectionConfigurationPromise.then(connection => {\n          if (connection.state() === ConnectionState.Disconnected) {\n            this.privConnectionId = null;\n            this.privConnectionConfigurationPromise = undefined;\n            return this.fetchConnection();\n          }\n          return this.privConnectionConfigurationPromise;\n        }, () => {\n          this.privConnectionId = null;\n          this.privConnectionConfigurationPromise = undefined;\n          return this.fetchConnection();\n        });\n      }\n      this.privConnectionConfigurationPromise = this.configureConnection();\n      return yield this.privConnectionConfigurationPromise;\n    });\n  }\n  // Takes an established websocket connection to the endpoint and sends speech configuration information.\n  configureConnection() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const connection = yield this.connectImpl();\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride(connection);\n      }\n      yield this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\n      return connection;\n    });\n  }\n}\nSynthesisAdapterBase.telemetryDataEnabled = true;","map":{"version":3,"names":["ArgumentNullError","ConnectionState","createNoDashGuid","EventSource","MessageType","ServiceEvent","CancellationErrorCode","CancellationReason","PropertyCollection","PropertyId","ResultReason","SpeechSynthesisBookmarkEventArgs","SpeechSynthesisEventArgs","SpeechSynthesisResult","SpeechSynthesisVisemeEventArgs","SpeechSynthesisWordBoundaryEventArgs","AgentConfig","CancellationErrorCodePropertyName","MetadataType","SynthesisAudioMetadata","SynthesisContext","SynthesisTurn","SpeechConnectionMessage","SynthesisAdapterBase","constructor","authentication","connectionFactory","synthesizerConfig","speechSynthesizer","audioDestination","speakOverride","undefined","receiveMessageOverride","connectImplOverride","configConnectionOverride","privConnectionConfigurationPromise","privAuthentication","privConnectionFactory","privSynthesizerConfig","privIsDisposed","privSpeechSynthesizer","privSessionAudioDestination","privSynthesisTurn","privConnectionEvents","privServiceEvents","privSynthesisContext","privAgentConfig","connectionEvents","attach","connectionEvent","name","connectionClosedEvent","statusCode","cancelSynthesisLocal","Error","BadRequestParameters","ConnectionFailure","reason","synthesisContext","agentConfig","serviceEvents","activityTemplate","messagePayload","privActivityTemplate","audioOutputFormat","format","privAudioOutputFormat","addHeader","audio","hasHeader","updateHeader","byteLength","tmp","Uint8Array","header","set","buffer","isDisposed","dispose","close","connection","connect","connectImpl","sendNetworkMessage","path","payload","type","Text","Binary","contentType","fetchConnection","send","requestId","Speak","text","isSSML","successCallback","errorCallBack","ssml","buildSsml","privSuccessCallback","privErrorCallback","startNewSynthesis","sendSynthesisContext","sendSsmlMessage","synthesisStartEventArgs","SynthesizingAudioStarted","synthesisStarted","receiveMessage","e","Promise","reject","cancelSynthesis","cancellationReason","errorCode","error","properties","setProperty","result","Canceled","SynthesisCanceled","cancelEvent","_a","_b","isSynthesizing","onStopSynthesizing","processTypeSpecificMessages","connectionMessage","message","read","fromConnectionMessage","toLowerCase","onServiceTurnStartResponse","onServiceResponseMessage","textBody","streamId","binaryBody","onAudioChunkReceived","synthesizing","audioWithHeader","ev","SynthesizingAudio","write","metadataList","fromJSON","Metadata","metadata","Type","WordBoundary","SentenceBoundary","onTextBoundaryEvent","wordBoundaryEventArgs","Data","Offset","Duration","Length","currentTextOffset","currentSentenceOffset","BoundaryType","wordBoundary","Bookmark","bookmarkEventArgs","bookmarkReached","Viseme","onVisemeMetadataReceived","IsLastAnimation","visemeEventArgs","VisemeId","getAndClearVisemeAnimation","visemeReceived","SessionEnd","onSessionEnd","onServiceTurnEndResponse","audioBuffer","getAllReceivedAudioWithHeader","SynthesizingAudioCompleted","audioDuration","synthesisCompleted","onEvent","synthesisContextJson","toJSON","isUnAuthorized","privConnectionPromise","then","state","Disconnected","privConnectionId","privAuthFetchEventId","onPreConnectionStart","authPromise","fetchOnExpiry","fetch","__awaiter","onAuthCompleted","create","events","event","response","open","onConnectionEstablishCompleted","resolve","parameters","getProperty","SpeechServiceConnection_Endpoint","catch","sendSpeechServiceConfig","SpeechServiceConfigJson","configureConnection","SpeechServiceConfig","serialize","telemetryDataEnabled"],"sources":["src/common.speech/SynthesisAdapterBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer,\r\n                                undefined,\r\n                                undefined,\r\n                                this.privSynthesisTurn.audioDuration\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}