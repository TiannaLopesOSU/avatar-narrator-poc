{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { StringUtils } from \"../common/StringUtils\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const endpoint = this.getEndpointUrl(config);\n    const queryParams = {};\n    this.setQueryParams(queryParams, config, endpoint);\n    const headers = {};\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n  getEndpointUrl(config, returnRegionPlaceholder) {\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    let endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    if (!endpointUrl) {\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\n      endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\n    }\n    if (returnRegionPlaceholder === true) {\n      return endpointUrl;\n    }\n    return StringUtils.formatString(endpointUrl, {\n      region\n    });\n  }\n  setQueryParams(queryParams, config, endpointUrl) {\n    queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\n    this.setCommonUrlParams(config, queryParams, endpointUrl);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames.StableTranslation, config, queryParams, endpointUrl);\n    const translationVoice = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    if (translationVoice !== undefined) {\n      queryParams.voice = translationVoice;\n      queryParams.features = \"texttospeech\";\n    }\n  }\n}","map":{"version":3,"names":["ProxyInfo","WebsocketConnection","StringUtils","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranslationConnectionFactory","create","config","authInfo","connectionId","endpoint","getEndpointUrl","queryParams","setQueryParams","headers","token","undefined","headerName","ConnectionId","parameters","setProperty","SpeechServiceConnection_Url","enableCompression","getProperty","fromRecognizerConfig","returnRegionPlaceholder","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","endpointUrl","SpeechServiceConnection_Endpoint","host","SpeechServiceConnection_Host","formatString","from","SpeechServiceConnection_RecoLanguage","to","SpeechServiceConnection_TranslationToLanguages","setCommonUrlParams","setUrlParameter","SpeechServiceResponse_TranslationRequestStablePartialResult","StableTranslation","translationVoice","SpeechServiceConnection_TranslationVoice","voice","features"],"sources":["src/common.speech/TranslationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport { StringUtils } from \"../common/StringUtils\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n            endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}